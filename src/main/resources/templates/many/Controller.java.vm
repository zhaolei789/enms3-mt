package ${package1}.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import ${basepackage1}.common.annotation.ControllerLog;
import ${basepackage1}.common.controller.BaseController;
import ${basepackage1}.common.utils.BaseUtils;
import ${basepackage1}.common.utils.easyui.PageParam;
import ${basepackage1}.common.utils.easyui.PageSet;

#foreach($column in $list)
import ${package1}.service.${column.className}Service;
#end
import ${package1}.model.${className1};
import ${package1}.service.${className1}Service;

/**
 * ${comments1}
 *
 * @Author ${author1}
 * @Email ${email1}
 * @Date ${datetime1}
 */
@Controller
@RequestMapping("/${pathName1}")
public class ${className1}Controller extends ${SystemName1}BaseController {

    @Autowired
    private ${className1}Service ${classname1}Service;

    #foreach($column in $list)
        @Autowired
        private ${column.className}Service ${column.classname}Service;
    #end

    //分页页面
    @RequestMapping("/index")
    @ControllerLog(description = "打开${className1}模块管理页面")
    public String index(@RequestParam Map<String, Object> params) {
        return "${systemName1}/${pathName1}/index";
    }

    //获取分页集
    @ResponseBody
    @RequestMapping(value = "/getPageSet", method = RequestMethod.POST)
    @ControllerLog(description = "获得${className1}分页集数据")
    public Object getPageSet(PageParam pageParam) {
        String filterSort = "";
        filterSort = BaseUtils.filterSort(request, filterSort + getAuthFilter());
        PageSet<${className1}> pageSet = ${classname1}Service.getPageSet(pageParam, filterSort);
        return pageSet;
    }

    //获取详情
    @ResponseBody
    @RequestMapping(value = "/getDetailByUuid")
    @ControllerLog(description = "获得${className1}模块详细数据")
    public Object getDetailByUuid(${pk1.attrType} ${pk1.attrname}) {
        ${className1} ${classname1} = ${classname1}Service.selectByPrimaryKey(${pk1.attrname});
        return ${classname1};
    }

    //新增页面
    @RequestMapping("/add")
    @ControllerLog(description = "打开${className1}模块新增页面")
    public String add() {
        return "${systemName1}/${pathName}/edit";
    }

    //保存数据
    @ResponseBody
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ControllerLog(description = "保存${className1}模块数据")
    public Object save(@ModelAttribute ${className1} ${classname1}) {
        int result = ${classname1}Service.insertSelective(getSaveData(${classname1}));
        return result > 0 ? success("保存成功！") : failure("保存失败！");
    }

    //编辑页面
    @RequestMapping("/edit")
    @ControllerLog(description = "打开${className1}模块编辑页面")
    public String edit() {
        return "${systemName1}/${pathName1}/edit";
    }

    //更新数据
    @ResponseBody
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ControllerLog(description = "更新${className1}模块数据")
    public Object update(@ModelAttribute ${className1} ${classname1}) {
        int result = ${classname1}Service.updateByPrimaryKeySelective(getUpdateData(${classname1}));
        return result > 0 ? success("更新成功！") : failure("更新失败！");
    }

    //删除数据
    @Transactional
    @ResponseBody
    @RequestMapping(value = "/deleteBatch", method = RequestMethod.POST)
    @ControllerLog(description = "删除${className1}模块数据")
    public Object deleteBatch(@RequestParam ${pk1.attrType}[] ${pk1.attrname}) {
    #foreach($column in $list)
        int result${velocityCount} = ${column.classname}Service.executeDeleteBatchByPuuid(${pk1.attrname});
    #end
        int result = ${classname1}Service.executeDeleteBatch(${pk1.attrname});
        return result > 0 ? success("删除成功！") : failure("删除失败！");
    }

}
